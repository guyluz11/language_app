default_platform(:ios)

def connect_api_key
  app_store_connect_api_key(
    key_id: ENV["APP_STORE_CONNECT_KEY_ID"],
    issuer_id: ENV["APP_STORE_CONNECT_ISSUER_ID"],
    key_filepath: "/tmp/app_store_key.p8"
  )
end


platform :ios do
  private_lane :clean_ios_screenshots do
    folder_path = "fastlane/metadata/ios/en-US/screenshots"

    if Dir.exist?(folder_path)
      Dir.foreach(folder_path) do |file|
        file_path = File.join(folder_path, file)
        File.delete(file_path) if File.file?(file_path)
      end
      UI.message("‚úÖ Cleaned existing iOS screenshots.")
    else
      UI.message("Creating screenshots folder at #{folder_path}")
      FileUtils.mkdir_p(folder_path)
    end
  end

  private_lane :copy_ios_screenshots do
    screenshots_src = "/tmp/word_link_screenshots"
    screenshots_dest = "fastlane/metadata/ios/en-US/screenshots"

    clean_ios_screenshots

    unless Dir.exist?(screenshots_src)
      UI.user_error!("‚ùå Source screenshot folder '#{screenshots_src}' does not exist.")
    end

    FileUtils.mkdir_p(screenshots_dest)

    Dir.foreach(screenshots_src) do |filename|
      next if filename == '.' || filename == '..'
      src_file = File.join(screenshots_src, filename)
      dest_file = File.join(screenshots_dest, filename)
      FileUtils.cp(src_file, dest_file)
    end

    UI.message("‚úÖ Copied iOS screenshots to: #{screenshots_dest}")
  end

  lane :deploy do
    UI.message("üöÄ Starting iOS deploy using Flutter...")

    # üîê Use match to get certificates and profiles
    match(
      type: "appstore",
      git_url: "https://#{ENV["MATCH_GIT_TOKEN"]}@github.com/guyluz11/match-certificates.git",
      app_identifier: ENV["APP_IDENTIFIER"],
      username: ENV["FASTLANE_USER"],
      api_key: connect_api_key
    )

    # Fetch and increment build number
    latest_build = app_store_build_number(
      app_identifier: ENV["APP_IDENTIFIER"],
      api_key: connect_api_key
    )

    new_build_number = latest_build + 1
    increment_build_number(build_number: new_build_number)
    UI.message("New build number: #{new_build_number}")

    copy_ios_screenshots

    # Build Flutter iOS app for release
    sh("flutter build ipa --release --build-number=#{new_build_number}")

    # Upload to App Store Connect
    upload_to_app_store(
      skip_metadata: false,
      skip_screenshots: false,
      skip_binary_upload: false,
      ipa: "../../build/ios/ipa/*.ipa",
      api_key: connect_api_key
    )

    UI.success("üéâ iOS app uploaded with screenshots and build number #{new_build_number}!")
  end
end
